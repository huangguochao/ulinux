CPU微架构
1.流水线：
将一条指令的执行过程分解成多个阶段（如取指、译码、执行、访存、写回），类似于工厂的装配线。
每个时钟周期，每个阶段都在处理不同指令的不同部分。

对性能测试的影响：
理想情况下，每个时钟周期都能完成一条指令（CPI = 1）。
流水线越长，理论上频率可以提得越高，但如果出现流水线冒泡（ stalled pipeline ，因依赖关系等待），性能损失越大。
测试时需要关注 IPC 指标。

2.乱序执行：
CPU为了克服指令间的依赖关系，避免流水线空转，会在保证最终结果正确的前提下，动态调整指令的执行顺序。
后续需要执行的指令如果操作数准备好了，就可以提前进入流水线。

对性能测试的影响：
这是现代高性能CPU的关键。
测试时，如果发现IPC较低，可能是由于内存访问延迟过高（数据没准备好），导致乱序执行也无法有效掩盖延迟。

3.分支预测：
当CPU遇到条件分支指令（如 if-else）时，它需要猜测程序会走哪个分支并提前执行。
如果猜对，流水线满载前进；如果猜错，需要清空已执行的错误路径指令，造成巨大的性能惩罚（可能浪费10-20个时钟周期）。

对性能测试的影响： 
这是性能分析的关键点。使用 perf stat -e branch-misses 可以查看分支预测失误率。
高失误率会显著降低IPC。
压力测试工具（如 Stress-ng）的某些测试方法（--cpu-method）会故意制造难以预测的分支来施加压力。

4.超标量：
CPU在一个时钟周期内可以发射并执行多条指令（如4条）。
这需要芯片内有多个执行单元（如多个ALU、加载存储单元等）。

对性能测试的影响： 
这是实现 IPC > 1 的基础。
测试时，IPC越高，说明CPU的执行单元利用率越高，代码效率越好。
IPC低下可能意味着指令级并行度不足或存在其他瓶颈。


