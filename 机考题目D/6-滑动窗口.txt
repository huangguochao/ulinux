LC3 无重复字符的最长子串
中等
提示
给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串 的长度。

示例 1:
输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

提示：
0 <= s.length <= 5 * 104
s 由英文字母、数字、符号和空格组成
---------------------------------------------------------------
class Solution:
    def lengthofLongestSubstring(self, s: str) -> int:
        occ = set()
        n = len(s)

        rk, ans = -1, 0
        for i in range(n):
            if i != 0:
               occ.remove(s[i-1])
            while rk + 1 < n and s[rk + 1] not in occ:
                occ.add(s[rk + 1])
                rk += 1

            ans = max(ans, rk - i + 1)
            
        return ans

if __name__ == "__main__":
    solu = Solution()
    s = "abcabcabbccccddd"
    len = solu.lengthofLongestSubstring(s)
    print(len)
-------------------------------------------------------------------
209. 长度最小的子数组
中等
给定一个含有 n 个正整数的数组和一个正整数 target 。
找出该数组中满足其总和大于等于 target 的长度最小的 子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。

示例 1：
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。

示例 2：
输入：target = 4, nums = [1,4,4]
输出：1

示例 3：
输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0

from typing import List

class Solution:
    def minSubint(self, nums:List[int], target:int)-> int:
        nums.sort(reverse=True)
        result = []

        sum = 0
        for i in range(len(nums)):
            if sum >= target:
                break
            sum += nums[i]
            result.append(nums[i])

        return len(result) if sum >= target else 0


if __name__ == "__main__":
    target = 7
    nums = [2, 3, 1, 2, 4, 3]
#    target = 4
#    nums = [1, 4, 4]
#    target = 11
#    nums = [1, 1, 1, 1, 1, 1, 1]
    solu = Solution()
    result = solu.minSubint(nums, target)
    print(result)
-------------------------------------------------------------------
