1-1
#LC20 有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。
示例 1:
输入: "()[]{}"
输出: true

示例 2:
输入: "(]"
输出: false

# 方法一，仅使用栈，更省空间
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        
        for item in s:
            if item == '(':
                stack.append(')')
            elif item == '[':
                stack.append(']')
            elif item == '{':
                stack.append('}')
            elif not stack or stack[-1] != item:
                return False
            else:
                stack.pop()
        
        return True if not stack else False

if __name__ == "__main__":
    solution = Solution()
    test_cases = ["()[]{}", "(]", "([)]", "{[]}"]

    for case in test_cases:
        print(f"input: '{case}', result: {solution.isValid(case)}")

# 方法二，使用字典
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {
            '(': ')',
            '[': ']',
            '{': '}'
        }
        for item in s:
            if item in mapping.keys():
                stack.append(mapping[item])
            elif not stack or stack[-1] != item: 
                return False
            else: 
                stack.pop()
        return True if not stack else False

if __name__ == "__main__":
    solution = Solution()
    test_cases = [ '(){}', '([', '{[]}', '([(]' ]
    for case in test_cases:
        print(f"input: '{case}', result: { solution.isValid(case) }")
-----------------------------------------------------------------------
-----------------------------------------------------------------------
LC71 简化路径
中等
给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 '/' 开头），请你将其转化为 更加简洁的规范路径。
在 Unix 风格的文件系统中规则如下：
一个点 '.' 表示当前目录本身。
此外，两个点 '..' 表示将目录切换到上一级（指向父目录）。
任意多个连续的斜杠（即，'//' 或 '///'）都被视为单个斜杠 '/'。
任何其他格式的点（例如，'...' 或 '....'）均被视为有效的文件/目录名称。
返回的 简化路径 必须遵循下述格式：
始终以斜杠 '/' 开头。
两个目录名之间必须只有一个斜杠 '/' 。
最后一个目录名（如果存在）不能 以 '/' 结尾。
此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 '.' 或 '..'）。
返回简化后得到的 规范路径 。

示例 1：
输入：path = "/home/"
输出："/home"
解释：
应删除尾随斜杠。

示例 2：
输入：path = "/home//foo/"
输出："/home/foo"
解释：
多个连续的斜杠被单个斜杠替换。

示例 3：
输入：path = "/home/user/Documents/../Pictures"
输出："/home/user/Pictures"
解释：
两个点 ".." 表示上一级目录（父目录）。

示例 4：
输入：path = "/../"
输出："/"
解释：
不可能从根目录上升一级目录。

示例 5：
输入：path = "/.../a/../b/c/../d/./"
输出："/.../b/d"
解释：
"..." 在这个问题中是一个合法的目录名。

提示：
1 <= path.length <= 3000
path 由英文字母，数字，'.'，'/' 或 '_' 组成。
path 是一个有效的 Unix 风格绝对路径。
----------------------------
class Solution:
    def simplifyPath(self, path:str) -> str:
        names = path.split("/")
        stack = list()
        for name in names:
            if name == "..":
                if stack:
                    stack.pop()
            elif name and name != ".":
                stack.append(name)
        return "/" + "/".join(stack)

if __name__ == "__main__":
    path = "/home/user/Documents/../Pictures"
    solu = Solution()
    result = solu.simplifyPath(path)
    print(result)
-----------------------------------------------------------------------
1047. 删除字符串中的所有相邻重复项

给出由小写字母组成的字符串 s，重复项删除操作会选择两个相邻且相同的字母，并删除它们。
在 s 上反复执行重复项删除操作，直到无法继续删除。
在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。
示例：
输入："abbaca"
输出："ca"
解释：
例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。

提示：
1 <= s.length <= 105
s 仅由小写英文字母组成。

class Solution:
    def removesame(self, s: str) -> str:
        result = list()

        for i in s:
            if result and result[-1] == i:
                result.pop()
            else:
                result.append(i)

        return "".join(result)

if __name__ == "__main__":
    s = "abbaca"
    solu = Solution()
    print(solu.removesame(s))
-----------------------------------------------------------------------
150. 逆波兰表达式求值

给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。
请你计算该表达式。返回一个表示表达式值的整数。
注意：
有效的算符为 '+'、'-'、'*' 和 '/' 。
每个操作数（运算对象）都可以是一个整数或者另一个表达式。
两个整数之间的除法总是 向零截断 。
表达式中不含除零运算。
输入是一个根据逆波兰表示法表示的算术表达式。
答案及所有中间计算结果可以用 32 位 整数表示。

示例 1：
输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9

示例 2：
输入：tokens = ["4","13","5","/","+"]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6

示例 3：
输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
输出：22
解释：该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
------------
from typing import List
class Solution:
    def changejs(self, tokens:List[str]) -> int:
        stack = list()
        for i in tokens:
            if i == "+":
                m = stack.pop()
                n = stack.pop()
                q = int(n) + int(m)
                stack.append(q)
            elif i == "-":
                m = stack.pop()
                n = stack.pop()
                q = int(n) - int(m)
                stack.append(q)
            elif i == "*":
                m = stack.pop()
                n = stack.pop()
                q = int(n) * int(m)
                stack.append(q)
            elif i == "/":
                m = stack.pop()
                n = stack.pop()
                q = int(n) / int(m)
                stack.append(q)
            else:
                stack.append(i)

        result = stack.pop()
        if result:
            return int(result)
        else:
            return -1

if __name__ == "__main__":
    tokens = ["2", "1", "+", "3", "*"]
    tokens = ["4", "13", "5", "/", "+"]
    tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
    solu = Solution()
    print(solu.changejs(tokens))
-----------------------------------------------------------------------
LC394 字符串解码

给定一个经过编码的字符串，返回它解码后的字符串。
编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。
你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。
此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。
测试用例保证输出的长度不会超过 105。

示例 1：
输入：s = "3[a]2[bc]"
输出："aaabcbc"

示例 2：
输入：s = "3[a2[c]]"
输出："accaccacc"

示例 3：
输入：s = "2[abc]3[cd]ef"
输出："abcabccdcdcdef"

示例 4：
输入：s = "abc3[cd]xyz"
输出："abccdcdcdxyz"
-----------------------------
class Solution:
    def decodeString(self, s:str) -> str:
        stack = []
        current_num = 0
        current_str = ''

        for char in s:
            if char.isdigit():
                current_num = current_num * 10 + int(char)
            elif char == '[':
                stack.append((current_str, current_num))
                current_str, current_num = '', 0
            elif char == ']':
                prev_str, num = stack.pop()
                current_str = prev_str + current_str * num
            else:
                current_str += char

        return current_str

if __name__ == "__main__":
    s = "3[a]2[bc]"
    s = "3[a2[c]]"
    s = "2[abc]3[cd]ef"
    s = "abc3[cd]xyz"

    solu = Solution()
    result = solu.decodeString(s)
    print(result)
-----------------------------------------------------------------------
735. 小行星碰撞
给定一个整数数组 asteroids，表示在同一行的小行星。
数组中小行星的索引表示它们在空间中的相对位置。
对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。
每一颗小行星以相同的速度移动。
找出碰撞后剩下的所有小行星。
碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。

示例 1：
输入：asteroids = [5,10,-5]
输出：[5,10]
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。

示例 2：
输入：asteroids = [8,-8]
输出：[]
解释：8 和 -8 碰撞后，两者都发生爆炸。

示例 3：
输入：asteroids = [10,2,-5]
输出：[10]
解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。

from typing import List
class Solution:
    def findasteroids(self, asteroids:List[int]) -> List[int]:
        stack = []

        for item in asteroids:
            while stack and item < 0 < stack[-1]:
                if abs(item) > stack[-1]:
                    stack.pop()
                    continue
                elif abs(item) == stack[-1]:
                    stack.pop()
                    break
                else:
                    break
            else:
                stack.append(item)

        return stack

if __name__ == "__main__":
    asteroids = [ 5, 10, -5]
    asteroids = [ 8, -8]
    asteroids = [ 10, 2, -5]
    solu = Solution()
    result = solu.findasteroids(asteroids)

    print(result)
-----------------------------------------------------------------------
