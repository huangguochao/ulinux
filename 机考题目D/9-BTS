LC200 岛屿数量
中等
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

示例 1：
输入：grid = [
  ['1','1','1','1','0'],
  ['1','1','0','1','0'],
  ['1','1','0','0','0'],
  ['0','0','0','0','0']
]
输出：1

示例 2：
输入：grid = [
  ['1','1','0','0','0'],
  ['1','1','0','0','0'],
  ['0','0','1','0','0'],
  ['0','0','0','1','1']
]
输出：3

提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'
---------------------------------------------------------------------------
class Solution:
    def dfs(self, grid, r, c):
        grid[r][c] = 0  						# 把当前陆地标记为海水（避免重复计数）
        nr, nc = len(grid), len(grid[0])				# 获取地图的行数和列数
        for x, y in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:	# 检查上下左右四个方向
            if 0 <= x < nr and 0 <= y < nc and grid[x][y] == "1":	# 如果相邻位置是陆地且在地图范围内
                self.dfs(grid, x, y)					# 继续探索这块陆地

    def numIslands(self, grid: List[List[str]]) -> int:			
        nr = len(grid)
        if nr == 0:
            return 0							# 空地图直接返回0
        nc = len(grid[0])						# 网格列数

        num_islands = 0							# 岛屿计数器
        for r in range(nr):						# 遍历每一行
            for c in range(nc):						# 遍历每一列
                if grid[r][c] == "1":					# 发现一块新陆地
                    num_islands += 1					# 岛屿数量+1
                    self.dfs(grid, r, c)				# 把这块陆地所在的整个岛"涂掉"
        
        return num_islands

if __name__ == "__main__":
    grid = [
    ['1','1','1','1','0'],
    ['1','1','0','1','0'],
    ['1','1','0','0','0'],
    ['0','0','0','0','0']
    ]

    grid = [
    ['1','1','0','0','0'],
    ['1','1','0','0','0'],
    ['0','0','1','0','0'],
    ['0','0','0','1','1']
    ]

    solu = Solution()
    num = solu.numIslands(grid)
    print(num)
---------------------------------------------------------------------------
