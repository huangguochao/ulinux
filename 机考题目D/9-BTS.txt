LC200 岛屿数量
中等
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

示例 1：
输入：grid = [
  ['1','1','1','1','0'],
  ['1','1','0','1','0'],
  ['1','1','0','0','0'],
  ['0','0','0','0','0']
]
输出：1

示例 2：
输入：grid = [
  ['1','1','0','0','0'],
  ['1','1','0','0','0'],
  ['0','0','1','0','0'],
  ['0','0','0','1','1']
]
输出：3

提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'
---------------------------------------------------------------------------
class Solution:
    def dfs(self, grid, r, c):
        grid[r][c] = 0  						# 把当前陆地标记为海水（避免重复计数）
        nr, nc = len(grid), len(grid[0])				# 获取地图的行数和列数
        for x, y in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:	# 检查上下左右四个方向
            if 0 <= x < nr and 0 <= y < nc and grid[x][y] == "1":	# 如果相邻位置是陆地且在地图范围内
                self.dfs(grid, x, y)					# 继续探索这块陆地

    def numIslands(self, grid: List[List[str]]) -> int:			
        nr = len(grid)
        if nr == 0:
            return 0							# 空地图直接返回0
        nc = len(grid[0])						# 网格列数

        num_islands = 0							# 岛屿计数器
        for r in range(nr):						# 遍历每一行
            for c in range(nc):						# 遍历每一列
                if grid[r][c] == "1":					# 发现一块新陆地
                    num_islands += 1					# 岛屿数量+1
                    self.dfs(grid, r, c)				# 把这块陆地所在的整个岛"涂掉"
        
        return num_islands

if __name__ == "__main__":
    grid = [
    ['1','1','1','1','0'],
    ['1','1','0','1','0'],
    ['1','1','0','0','0'],
    ['0','0','0','0','0']
    ]

    grid = [
    ['1','1','0','0','0'],
    ['1','1','0','0','0'],
    ['0','0','1','0','0'],
    ['0','0','0','1','1']
    ]

    solu = Solution()
    num = solu.numIslands(grid)
    print(num)
---------------------------------------------------------------------------
695. 岛屿的最大面积
给你一个大小为 m x n 的二进制矩阵 grid 。
岛屿 是由一些相邻的1(代表土地) 构成的组合，这里的「相邻」要求两个1 必须在 水平或者竖直的四个方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
岛屿的面积是岛上值为1的单元格的数目。
计算并返回grid中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

示例 1：
输入：
grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,1,1,0,1,0,0,0,0,0,0,0,0],
        [0,1,0,0,1,1,0,0,1,0,1,0,0],
        [0,1,0,0,1,1,0,0,1,1,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,1,1,0,0,0,0]]
输出：6
解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的1 。

示例 2：
输入：grid = [[0,0,0,0,0,0,0,0]]
输出：0
-----------------------------------------
from typing import List
class Solution:
    def dfs (self, grid, cur_i: int, cur_j: int)-> int:
        if cur_i < 0 or cur_j < 0 or cur_i == len(grid) or cur_j == len(grid[0]) or grid[cur_i][cur_j] != 1:
            return 0
        grid[cur_i][cur_j] = 0
        ans = 1
        for di, dj in [[0,1],[0,-1],[1,0],[-1,0]]:
            next_i, next_j = cur_i + di, cur_j + dj
            ans += self.dfs(grid, next_i, next_j)
        return ans

    def maxAreaOfIsland (self, grid: List[List[int]]) -> int:
        ans = 0
        for i, l in enumerate(grid):
            for j, n in enumerate(l):
                ans = max(self.dfs(grid, i, j), ans)
        return ans

if __name__ == "__main__":
    grid = [
        [0,0,1,0,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,1,1,0,1,0,0,0,0,0,0,0,0],
        [0,1,0,0,1,1,0,0,1,0,1,0,0],
        [0,1,0,0,1,1,0,0,1,1,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,1,1,0,0,0,0]]

    solu = Solution()

    result = solu.maxAreaOfIsland(grid)
    print(result)
---------------------------------------------------------------------------
547. 省份数量
有 n 个城市，其中一些彼此相连，另一些没有相连。
如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。
省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。
给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。
返回矩阵中 省份 的数量。

示例 1：
输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
输出：2

示例 2：
输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]
输出：3
--------
from typing import List
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i: int):
            for j in range(cities):
                if isConnected[i][j] == 1 and j not in visited:
                    visited.add(j)
                    dfs(j)
        cities = len(isConnected)
        visited = set()
        provinces = 0
        for i in range(cities):
            if i not in visited:
                dfs(i)
                provinces += 1
        return provinces

if __name__ == "__main__" :
    isConnected = [[1,1,0],[1,1,0],[0,0,1]]
    isConnected = [[1,0,0],[0,1,0],[0,0,1]]
    solu = Solution()
    result = solu.findCircleNum(isConnected)
    print(result)
---------------------------------------------------------------------------

---------------------------------------------------------------------------
