8)DP
LC322 零钱兑换
中等
给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。
你可以认为每种硬币的数量是无限的。

示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1

示例 2：
输入：coins = [2], amount = 3
输出：-1

示例 3：
输入：coins = [1], amount = 0
输出：0

提示：
1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104
----------------------------------------------------------------------
class Solution:
    def coinChange(self, coins, amount):
        dp = [amount + 1] * (amount + 1)
        dp [0] = 0

        for i in range(1, amount + 1):
            for coin in coins:
                print(f"i='{i}', coin='{coin}'")
                print(f"before:dp['{i}']= '{dp[i]}'")
                if coin <= i:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
                print(f"after:dp['{i}']= '{dp[i]}'")

        return dp[amount] if dp[amount] <= amount else -1

if __name__ == "__main__":
    solu = Solution()
    coins = [1,2,5]
    amount = 11
    num = solu.coinChange(coins, amount)
    print(num)

----------------------------------------------------------------------
70. 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶

示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
-------------
第1步 = 1
第2步 = 2
第i步 解法 = 第i-1步 解法 + 第 i-2步解法
-------------
from typing import List
class Solution:
    def louti(self, n: int) -> List[int]:
        if n <= 2:
            return n

        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i -2]

        return dp[n]

if __name__ == "__main__":
    n = 5
    solu = Solution()

    print(solu.louti(n))
----------------------------------------------------------------------
