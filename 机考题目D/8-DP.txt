8)DP
LC322 零钱兑换
中等
给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。
你可以认为每种硬币的数量是无限的。

示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1

示例 2：
输入：coins = [2], amount = 3
输出：-1

示例 3：
输入：coins = [1], amount = 0
输出：0

提示：
1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104
----------------------------------------------------------------------
class Solution:
    def coinChange(self, coins, amount):
        dp = [amount + 1] * (amount + 1)
        dp [0] = 0

        for i in range(1, amount + 1):
            for coin in coins:
                print(f"i='{i}', coin='{coin}'")
                print(f"before:dp['{i}']= '{dp[i]}'")
                if coin <= i:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
                print(f"after:dp['{i}']= '{dp[i]}'")

        return dp[amount] if dp[amount] <= amount else -1

if __name__ == "__main__":
    solu = Solution()
    coins = [1,2,5]
    amount = 11
    num = solu.coinChange(coins, amount)
    print(num)

----------------------------------------------------------------------
70. 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶

示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
-------------
第1步 = 1
第2步 = 2
第i步 解法 = 第i-1步 解法 + 第 i-2步解法
-------------
from typing import List
class Solution:
    def louti(self, n: int) -> List[int]:
        if n <= 2:
            return n

        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i -2]

        return dp[n]

if __name__ == "__main__":
    n = 5
    solu = Solution()

    print(solu.louti(n))
----------------------------------------------------------------------
198. 打家劫舍

你是一个专业的小偷，计划偷窃沿街的房屋。
每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
--------
from typing import List
class Solution:
    def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0

        size = len(nums)
        if size == 0:
            return nums[0]

        dp = [0] * size
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])

        for i in range(2, size):
            dp[i] = max(dp[i-1], dp[i -2] + nums[i])

        return dp[size -1]

if __name__ == "__main__":
    solu = Solution()
    nums = [2,7,9,3,1]

    print(solu.rob(nums))
----------------------------------------------------------------------
53. 最大子数组和
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组是数组中的一个连续部分。

示例 1：
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。

示例 2：
输入：nums = [1]
输出：1

示例 3：
输入：nums = [5,4,-1,7,8]
输出：23
--------------------------
from typing import List
class Solution:
    def maxsubsum(self, nums:List[int])-> int:
        pre = 0
        maxAns = nums[0]

        for i in range(len(nums)):
            pre = max(pre + nums[i], nums[i])    # 上一个最大值pre和当前的和，与当前值比。 pre值为负数放弃
            maxAns = max(maxAns, pre)            # 新的最大值为 pre和 最大值中的一个

        return maxAns

if __name__ == "__main__":
    nums = [-2,1,-3,4,-1,2,1,-5,4]
    nums = [5, 4, -1, 7, 8]
    solu = Solution()
    print(solu.maxsubsum(nums))
----------------------------------------------------------------------
494. 目标和
给你一个非负整数数组 nums 和一个整数 target 。
向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：
例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。

示例 1：
输入：nums = [1,1,1,1,1], target = 3
输出：5
解释：一共有 5 种方法让最终目标和为 3 。
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

示例 2：
输入：nums = [1], target = 1
输出：1
--------------------
from typing import List
class Solution:
    def findTargetSumWays(self, nums:List[int], target:int)-> int:
        total = sum(nums)
        if abs(target) > total:
            return 0
        dp = [0] * (2 * total + 1)
        dp[total] = 1
        for num in nums:
            new_dp = [0] * ( 2 * total + 1)
            for s in range(-total, total + 1):
                if dp[s + total] > 0:
                    new_dp[s + num + total] += dp[s + total]
                    new_dp[s - num + total] += dp[s + total]
            dp = new_dp
        return dp[target + total]

if __name__ == "__main__":
    solu = Solution()
    nums = [1,1,1,1,1]
    target = 3
    result = solu.findTargetSumWays(nums, target)
    print(result)
----------------------------------------------------------------------

----------------------------------------------------------------------
