3)哈希
LC349 两个数组的交集

题意：给定两个数组，编写一个函数来计算它们的交集。

输入  nums1 = [1,2,2,1]
      nums2 = [2,2]
输出  [2]
--------------------------------------------------
from typing import List
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        return list(set(nums1) & set(nums2))

if __name__ == "__main__":
    nums1 = [1,2,2,1]
    nums2 = [2,2]

    solu = Solution()
    nums3 = solu.intersection(nums1,nums2)
    print(nums3)
--------------------------------------------------
class Solution:
    def intersection(self, nums1, nums2):
        return list(set(nums1) & set(nums2))

if __name__ == "__main__":
    nums1 = [1,2,2,1]
    nums2 = [2,2]
    solu = Solution()
    print(solu.intersection(nums1, nums2))
--------------------------------------------------
LC242 有效的字母异位词
简单
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的 字母异位词。

示例 1:
输入: s = "anagram", t = "nagaram"
输出: true

示例 2:
输入: s = "rat", t = "car"
输出: false

提示:
1 <= s.length, t.length <= 5 * 104
s 和 t 仅包含小写字母

class Solution:
    def isYwc(self, str1:str, str2:str) -> bool:
        set1 = set(str1)
        set2 = set(str2)

        if set1 == set2:
            return True
        else:
            return False

if __name__ == "__main__":
    s = "anagram"
    t = "nagaram"

    s = "rat"
    t = "car"

    solu = Solution()
    print(solu.isYwc(s,t))
--------------------------------------------------
LC1 两数之和 
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。
你可以按任意顺序返回答案。

示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]

提示：
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案
----------------------------------------
from typing import List
class Solution:
    def sum(self, nums:List[int], target:int) -> list[int]:
        length = len(nums)
        result = [0, 0]

        for i in range(length):
            for j in range(i+1,length):
                if nums[i] + nums[j] == target :
                    result[0] = i
                    result[1] = j
                    return result

        return result

if __name__ == "__main__":
    nums = [2, 7, 11, 15]
    target = 9

    nums = [3, 2, 4]
    target = 6

    nums = [3, 3]
    target = 6

    solu = Solution()
    result = []
    result = solu.sum(nums, target)
    print(result)
--------------------------------------------------
LC219 存在重复元素II
给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) <= k 。如果存在，返回 true ；否则，返回 false 。

示例 1：
输入：nums = [1,2,3,1], k = 3
输出：true

示例 2：
输入：nums = [1,0,1,1], k = 1
输出：true

示例 3：
输入：nums = [1,2,3,1,2,3], k = 2
输出：false
---------
from typing import List
class Solution:
    def isexisted(self, nums:List[int], k:int) -> bool:
        result = False
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if i != j and nums[i] == nums[j] and abs(i - j) <= k:
                    result = True
                    break
        return result

if __name__ == "__main__" :
    print("please input the nums:")
    num = input()
    nums = []
    for i in num.split():
        nums.append(int(i))

    print("please input k:")
    k = int(input())
    solu = Solution()
    result = solu.isexisted(nums, k)
    print(result)
--------------------------------------------------
